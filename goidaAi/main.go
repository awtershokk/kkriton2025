package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/gorilla/websocket"
	"io"
	"log"
	"net/http"
	"strings"
)

const apiKey = "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"

func handleWebSocket(conn *websocket.Conn) {
	defer conn.Close()

	messages := []map[string]string{
		{
			"role":    "system",
			"content": "–¢—ã —è–≤–ª—è–µ—à—å—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º, —Ç–µ–±—è –∑–æ–≤—É—Ç '–ì–û–ô–î–ê-–ë–û–¢' –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –°–í–û, —Å–µ–º–µ–π –≤–æ–µ–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –∏ –ù–ö–û, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –≤–µ—Ç–µ—Ä–∞–Ω–∞–º, –ø—Ä–∞–≤–æ–≤—ã–º–∏, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–º–∏ –∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–∏–º —Ç–µ–º–∞–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Å–≤–æ–µ–π —Ä–µ—á–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞. –î–∞–ª–µ–µ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
		},
	}

	welcomeMessage := "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ì–û–ô–î–ê-–ë–û–¢ üëã. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–µ—Ç–µ—Ä–∞–Ω–æ–≤, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –°–í–û, —Å–µ–º–µ–π –≤–æ–µ–Ω–Ω—ã—Ö, –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –∏ –ù–ö–û. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
	err := conn.WriteMessage(websocket.TextMessage, []byte(welcomeMessage))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			break
		}

		userMessage := string(msg)
		if strings.ToLower(userMessage) == "exit" {
			fmt.Println("üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
			break
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
		messages = append(messages, map[string]string{
			"role":    "user",
			"content": userMessage,
		})

		// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
		requestBody := map[string]interface{}{
			"model":    "qwen/qwen3-30b-a3b:free",
			"messages": messages,
		}

		body, err := json.Marshal(requestBody)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
		url := "https://openrouter.ai/api/v1/chat/completions"
		req, err := http.NewRequestWithContext(context.Background(), "POST", url, bytes.NewBuffer(body))
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
			continue
		}

		req.Header.Set("Authorization", "Bearer "+apiKey)
		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("HTTP-Referer", "https://yourwebsite.com")
		req.Header.Set("X-Title", "Go Chat App")

		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
			continue
		}
		defer resp.Body.Close()

		var response struct {
			Choices []struct {
				Message struct {
					Content string `json:"content"`
				} `json:"message"`
			} `json:"choices"`
		}

		responseBody, err := io.ReadAll(resp.Body)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
			continue
		}

		if err := json.Unmarshal(responseBody, &response); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
			continue
		}

		assistantReply := response.Choices[0].Message.Content
		assistantReply += " –ì–û–ô–î–ê!!!"

		err = conn.WriteMessage(websocket.TextMessage, []byte(assistantReply))
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: %v", err)
			break
		}

		messages = append(messages, map[string]string{
			"role":    "assistant",
			"content": assistantReply,
		})
	}
}

func main() {
	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		upgrader := websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool {
				return true
			},
		}

		conn, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", err)
			return
		}

		handleWebSocket(conn)
	})

	fmt.Println("WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8081/ws")
	log.Fatal(http.ListenAndServe(":8081", nil))
}
